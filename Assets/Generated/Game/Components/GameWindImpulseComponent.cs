//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public WindImpulseComponent windImpulse { get { return (WindImpulseComponent)GetComponent(GameComponentsLookup.WindImpulse); } }
    public bool hasWindImpulse { get { return HasComponent(GameComponentsLookup.WindImpulse); } }

    public void AddWindImpulse(UnityEngine.Vector3 newDirection, float newPower) {
        var index = GameComponentsLookup.WindImpulse;
        var component = (WindImpulseComponent)CreateComponent(index, typeof(WindImpulseComponent));
        component.Direction = newDirection;
        component.Power = newPower;
        AddComponent(index, component);
    }

    public void ReplaceWindImpulse(UnityEngine.Vector3 newDirection, float newPower) {
        var index = GameComponentsLookup.WindImpulse;
        var component = (WindImpulseComponent)CreateComponent(index, typeof(WindImpulseComponent));
        component.Direction = newDirection;
        component.Power = newPower;
        ReplaceComponent(index, component);
    }

    public void RemoveWindImpulse() {
        RemoveComponent(GameComponentsLookup.WindImpulse);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWindImpulse;

    public static Entitas.IMatcher<GameEntity> WindImpulse {
        get {
            if (_matcherWindImpulse == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.WindImpulse);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWindImpulse = matcher;
            }

            return _matcherWindImpulse;
        }
    }
}
