using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using System.Security.Cryptography;

namespace Game.Config.Model
{
    public class ConfigAdminEditorImporter
    {
        private readonly ConfigAdminEditor editor;

        public ConfigAdminEditorImporter(ConfigAdminEditor editor)
        {
            this.editor = editor;
        }

        public void Import(List<ConfigSheet> sheets)
        {
            
            Debug.Log("Starting the import!");
            bool fullImport = (sheets == null);
            if (fullImport)
            {
                InitDirectories();
            }
            ImportInternal(sheets);
            Debug.Log("Finished the import!");
        }

        private void ImportInternal(List<ConfigSheet> sheetsToImport)
        {
            if (sheetsToImport == null)
            {
                sheetsToImport = editor.Data.Sheets;
            }
            
            try
            {
                var service = GoogleSheetService.GetService(editor.Data.GoogleSpreadsheetCredentialFileUri);
                foreach (var sheet in sheetsToImport)
                {
                    var spreadSheetManager = new SpreadSheetManager(sheet.URL, sheet.ID, service);
                    spreadSheetManager.ImportConfigModel(ConfigPaths.EditorConfigModelPath, OnError, OnNext);
                }

                // create the index file of hashes (always from all the files!)
                Dictionary<string, string> fileHash = new Dictionary<string, string>();
                foreach (var sheet in editor.Data.Sheets)
                {
                    fileHash[sheet.ID] = GetHashFromFile(Path.Combine(ConfigPaths.LocalAssetPath, sheet.ID + ".json"));
                }
                File.WriteAllText(Path.Combine(ConfigPaths.LocalIndexFile), JsonConvert.SerializeObject(fileHash));
            }
            catch (Exception e)
            {
                Debug.LogError($"[ConfigModelProcessor.Import] {e.Message}");
                editor.ShowDialog(GoogleSheetService.ProcessGoogleSpreadsheetManagerException(e));
            }
        }

        private void OnError(string error)
        {
            Debug.LogError(error);
            editor.ShowDialog(error);
        }

        private void OnNext(string dirName)
        {
            Pack(dirName);
            editor.MarkAssetDatabaseForRefresh();
        }

        private void Pack(string dirName)
        {
            var configModelData = new List<object>();
            var configModelFiles = Directory.GetFiles(Path.Combine(ConfigPaths.EditorConfigModelPath, dirName));
            foreach (var configModelFile in configModelFiles)
            {
                var configModelFileContent = File.ReadAllText(configModelFile);
                var configModelFileData = JsonConvert.DeserializeObject(configModelFileContent);
                configModelData.Add(configModelFileData);
            }
            try
            {
                string outFile = Path.Combine(ConfigPaths.LocalAssetPath, dirName + ".json");
                Debug.Log("writing out " + outFile);
                File.WriteAllText(outFile, JsonConvert.SerializeObject(configModelData, Formatting.None));
            }
            catch (Exception e)
            {
                editor.ShowDialog(e.Message);
            }
        }

        private void InitDirectories()
        {
            DirectoryUtil.CleanDirectory(ConfigPaths.AutogeneratedCodePath);
            DirectoryUtil.CleanDirectory(ConfigPaths.LocalAssetPath);
            DirectoryUtil.CleanDirectory(ConfigPaths.EditorConfigModelPath);
            DirectoryUtil.CleanDirectory(ConfigPaths.ConfigModelClassPath);
        }

        private string GetHashFromFile(string filename)
        {
            var sha = SHA256.Create();
            var stream = File.OpenRead(filename);
            var hash = sha.ComputeHash(stream);
            return BitConverter.ToString(hash);
        }
    }
}